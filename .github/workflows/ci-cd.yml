name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Services
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service:
          - gateway-api
          - somallm-provider
          - memory-gateway
          - constitution-service
          - identity-service
          - billing-service
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      
      - name: Install dependencies
        run: |
          cd services/${{ matrix.service }}
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          pytest tests/ --cov=app --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}

  lint:
    name: Lint & Security
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install linters
        run: |
          pip install black ruff mypy bandit safety
      
      - name: Black format check
        run: black --check services/
      
      - name: Ruff lint
        run: ruff check services/
      
      - name: Type check
        run: mypy services/ --ignore-missing-imports
        continue-on-error: true
      
      - name: Security scan (Bandit)
        run: bandit -r services/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Dependency vulnerabilities
        run: safety check --json
        continue-on-error: true

  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service:
          - gateway-api
          - somallm-provider
          - memory-gateway
          - constitution-service
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=semver,pattern={{version}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.somaagent.io
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
      
      - name: Deploy to staging
        run: |
          kubectl set image deployment/gateway-api \
            gateway-api=${{ env.REGISTRY }}/${{ github.repository }}/gateway-api:develop \
            -n somaagent-staging
          
          kubectl set image deployment/somallm-provider \
            somallm-provider=${{ env.REGISTRY }}/${{ github.repository }}/somallm-provider:develop \
            -n somaagent-staging
          
          kubectl rollout status deployment/gateway-api -n somaagent-staging
          kubectl rollout status deployment/somallm-provider -n somaagent-staging
      
      - name: Run smoke tests
        run: |
          curl -f https://staging.somaagent.io/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://api.somaagent.io
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}
      
      - name: Deploy to production (canary)
        run: |
          # Deploy canary (10% traffic)
          kubectl set image deployment/gateway-api-canary \
            gateway-api=${{ env.REGISTRY }}/${{ github.repository }}/gateway-api:main \
            -n somaagent
          
          kubectl rollout status deployment/gateway-api-canary -n somaagent
      
      - name: Monitor canary metrics
        run: |
          # Wait 5 minutes and check metrics
          sleep 300
          
          # Check error rate (should be <1%)
          ERROR_RATE=$(curl -s "http://prometheus:9090/api/v1/query?query=rate(http_requests_total{deployment='gateway-api-canary',code=~'5..'}[5m])" | jq -r '.data.result[0].value[1]')
          
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "Canary error rate too high: $ERROR_RATE"
            exit 1
          fi
      
      - name: Promote canary to production
        run: |
          # Promote canary to full production
          kubectl set image deployment/gateway-api \
            gateway-api=${{ env.REGISTRY }}/${{ github.repository }}/gateway-api:main \
            -n somaagent
          
          kubectl rollout status deployment/gateway-api -n somaagent
      
      - name: Notify deployment
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "âœ… Production deployment successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Deployed to production: ${{ github.sha }}"
                  }
                }
              ]
            }
