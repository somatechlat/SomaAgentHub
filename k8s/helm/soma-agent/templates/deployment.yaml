{{- $namespace := .Values.global.namespace | default .Release.Namespace -}}
{{- range $name, $svc := .Values.services }}
{{- if $svc.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $name }}
    app.kubernetes.io/name: {{ $name }}
    app.kubernetes.io/part-of: {{ $.Chart.Name }}
spec:
  replicas: {{ $svc.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $name }}
  template:
    metadata:
      labels:
        app: {{ $name }}
        app.kubernetes.io/name: {{ $name }}
        app.kubernetes.io/part-of: {{ $.Chart.Name }}
    spec:
      {{- if and $svc.serviceAccount $svc.serviceAccount.name }}
      serviceAccountName: {{ $svc.serviceAccount.name }}
      {{- end }}
      containers:
        - name: {{ $name }}
          image: "{{ if contains ":" (last (splitList "/" (printf "%v" $svc.image))) }}{{ printf "%v" $svc.image }}{{ else }}{{ printf "%v:%v" $svc.image ($.Values.global.imageTag | default "latest") }}{{ end }}"
          imagePullPolicy: {{ $svc.imagePullPolicy | default $.Values.global.imagePullPolicy }}
          securityContext:
{{ toYaml ($svc.securityContext | default $.Values.global.securityContext) | indent 12 }}
          ports:
            - containerPort: {{ index $.Values.ports $name }}
          {{- if $svc.envFromSecret }}
          envFrom:
            - secretRef:
                name: {{ $svc.envFromSecret }}
          {{- end }}
          env:
            - name: ENABLE_OTLP
              value: {{ ternary "true" "false" ($.Values.global.observability.enableOtlp | default false) | quote }}
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: {{ ($.Values.global.observability.otlpEndpoint | default "http://otel-collector.observability:4317") | quote }}
            - name: ENVIRONMENT
              value: {{ $.Values.global.environment | default "production" | quote }}
          {{- if and $svc.volcano $svc.volcano.enabled }}
            - name: ENABLE_VOLCANO_SCHEDULER
              value: "true"
            - name: VOLCANO_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VOLCANO_DEFAULT_QUEUE
              value: {{ $svc.volcano.defaultQueue | default "interactive" | quote }}
            - name: VOLCANO_SESSION_IMAGE
              value: {{ $svc.volcano.sessionImage | default "python:3.11-slim" | quote }}
            - name: VOLCANO_SESSION_CPU
              value: {{ $svc.volcano.sessionCpu | default "500m" | quote }}
            - name: VOLCANO_SESSION_MEMORY
              value: {{ $svc.volcano.sessionMemory | default "512Mi" | quote }}
            - name: VOLCANO_JOB_TIMEOUT_SECONDS
              value: {{ printf "%v" ($svc.volcano.jobTimeoutSeconds | default 300) | quote }}
          {{- else }}
            - name: ENABLE_VOLCANO_SCHEDULER
              value: "false"
          {{- end }}
            - name: KUBECTL_BINARY
              value: "kubectl"
          {{- if $.Values.global.spiffe.enabled }}
            - name: ENABLE_SPIFFE
              value: "true"
            - name: SPIFFE_TRUST_DOMAIN
              value: {{ $.Values.global.spiffe.trustDomain | default "somaagent.io" | quote }}
            - name: SPIFFE_CERT_DIR
              value: {{ $.Values.global.spiffe.certDir | default "/var/run/secrets/spiffe" | quote }}
            - name: SPIFFE_WORKLOAD_SOCKET
              value: {{ $.Values.global.spiffe.socketPath | default "/run/spire/sockets/agent.sock" | quote }}
          {{- else }}
            - name: ENABLE_SPIFFE
              value: "false"
          {{- end }}
          {{- if $svc.env }}
          {{- range $env := $svc.env }}
            - name: {{ $env.name }}
              value: {{ $env.value | quote }}
          {{- end }}
          {{- end }}
          {{- if $.Values.global.spiffe.enabled }}
          volumeMounts:
            - name: spiffe-agent-socket
              mountPath: {{ $.Values.global.spiffe.socketMountPath | default "/run/spire/sockets" | quote }}
              readOnly: true
            - name: spiffe-cert-dir
              mountPath: {{ $.Values.global.spiffe.certDir | default "/var/run/secrets/spiffe" | quote }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: {{ index $.Values.ports $name }}
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: {{ index $.Values.ports $name }}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
{{- if $svc.resources }}
            limits:
{{ toYaml $svc.resources.limits | indent 14 }}
            requests:
{{ toYaml $svc.resources.requests | indent 14 }}
{{- else }}
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "1000m"
              memory: "512Mi"
{{- end }}
      {{- if $.Values.global.spiffe.enabled }}
      volumes:
        - name: spiffe-agent-socket
          hostPath:
            path: {{ $.Values.global.spiffe.hostSocketPath | default "/run/spire/sockets" | quote }}
            type: DirectoryOrCreate
        - name: spiffe-cert-dir
          emptyDir: {}
      {{- end }}
{{- end }}
{{- end }}