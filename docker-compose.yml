# docker-compose.yml
# CANONICAL Docker Compose file for SomaAgentHub
# All services use the 10000+ port range for consistency

name: somaagenthub

services:
  # --- Core Application Services ---
  gateway-api:
    build:
      context: .
      dockerfile: services/gateway-api/Dockerfile
    container_name: somaagenthub_gateway-api
    restart: unless-stopped
    ports:
      - "${GATEWAY_API_PORT:-10000}:10000"
    environment:
      - SOMAGENT_GATEWAY_REDIS_URL=redis://redis:6379/0
      - SOMAGENT_GATEWAY_ORCHESTRATOR_URL=http://orchestrator:10001
      - SOMAGENT_GATEWAY_JWT_SECRET=${SOMAGENT_IDENTITY_JWT_SECRET:-dev-secret}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      orchestrator:
        condition: service_healthy
      identity-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://127.0.0.1:10000/ready', timeout=3)\""]
      interval: 10s
      timeout: 5s
      retries: 6
    networks:
      - somaagenthub-network

  orchestrator:
    build:
      context: .
      dockerfile: services/orchestrator/Dockerfile
    container_name: somaagenthub_orchestrator
    restart: unless-stopped
    ports:
      - "${ORCHESTRATOR_PORT:-10001}:10001"
    environment:
      - TEMPORAL_HOST=temporal-server:7233
      - TEMPORAL_NAMESPACE=${TEMPORAL_NAMESPACE:-default}
      - TEMPORAL_TASK_QUEUE=${TEMPORAL_TASK_QUEUE:-somagent.session.workflows}
      - TEMPORAL_ENABLED=${TEMPORAL_ENABLED:-true}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      temporal-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://127.0.0.1:10001/ready', timeout=3)\""]
      interval: 10s
      timeout: 5s
      retries: 6
    networks:
      - somaagenthub-network

  identity-service:
    build:
      context: .
      dockerfile: services/identity-service/Dockerfile
    container_name: somaagenthub_identity-service
    restart: unless-stopped
    ports:
      - "${IDENTITY_SERVICE_PORT:-10002}:10002"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - SOMAGENT_IDENTITY_JWT_SECRET=${SOMAGENT_IDENTITY_JWT_SECRET:-dev-secret}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://127.0.0.1:10002/health', timeout=3)\""]
      interval: 10s
      timeout: 5s
      retries: 6
    networks:
      - somaagenthub-network

  # --- Infrastructure Services ---
  app-postgres:
    image: postgres:16.4-alpine
    container_name: somaagenthub_app-postgres
    restart: unless-stopped
    ports:
      - "${APP_POSTGRES_PORT:-10004}:5432"
    environment:
      - POSTGRES_USER=${APP_POSTGRES_USER:-somaagent}
      - POSTGRES_PASSWORD=${APP_POSTGRES_PASSWORD:-somaagent}
      - POSTGRES_DB=${APP_POSTGRES_DB:-somaagent}
    volumes:
      - app-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${APP_POSTGRES_USER:-somaagent} -d ${APP_POSTGRES_DB:-somaagent}"]
      interval: 10s
      timeout: 5s
      retries: 6
    networks:
      - somaagenthub-network

  temporal-postgres:
    image: postgres:15-alpine
    container_name: somaagenthub_temporal-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${TEMPORAL_POSTGRES_USER:-temporal}
      - POSTGRES_PASSWORD=${TEMPORAL_POSTGRES_PASSWORD:-temporal}
      - POSTGRES_DB=${TEMPORAL_POSTGRES_DB:-temporal}
    volumes:
      - temporal-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEMPORAL_POSTGRES_USER:-temporal} -d ${TEMPORAL_POSTGRES_DB:-temporal}"]
      interval: 10s
      timeout: 5s
      retries: 6
    networks:
      - somaagenthub-network

  temporal-server:
    image: temporalio/auto-setup:1.22.4
    container_name: somaagenthub_temporal
    restart: unless-stopped
    ports:
      - "${TEMPORAL_PORT:-10009}:7233"
    depends_on:
      temporal-postgres:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${TEMPORAL_POSTGRES_USER:-temporal}
      - POSTGRES_PWD=${TEMPORAL_POSTGRES_PASSWORD:-temporal}
      - POSTGRES_SEEDS=temporal-postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    volumes:
      - ./infra/temporal/config:/etc/temporal/config/dynamicconfig:ro
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal-server:7233", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - somaagenthub-network

  redis:
    image: redis:7-alpine
    container_name: somaagenthub_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-10003}:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 6
    networks:
      - somaagenthub-network

  qdrant:
    image: qdrant/qdrant:v1.11.0@sha256:22a2d455837380d5fa1a3455b87b4fe7af30aa4f4712f8a57027c61022113796
    container_name: somaagenthub_qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT:-10005}:6333"
    volumes:
      - qdrant-data:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:6333/healthz || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 6
    networks:
      - somaagenthub-network

  clickhouse:
    image: clickhouse/clickhouse-server:24.7-alpine@sha256:3187267104ffa306377a9d41eedcdb9c3fade52db855f92021fb1498a070c7fb
    container_name: somaagenthub_clickhouse
    restart: unless-stopped
    ports:
      - "${CLICKHOUSE_HTTP_PORT:-10006}:8123"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8123/ping || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 6
    networks:
      - somaagenthub-network

  minio:
    image: minio/minio:latest@sha256:a1a8bd4ac40ad7881a245bab97323e18f971e4d4cba2c2007ec1bedd21cbaba2
    container_name: somaagenthub_minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-somaagent}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-local-developer}
    command: server /data --console-address :9001
    ports:
      - "${MINIO_API_PORT:-10007}:9000"
      - "${MINIO_CONSOLE_PORT:-10008}:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:9000/minio/health/live || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 6
    networks:
      - somaagenthub-network

  # --- Secrets Management ---
  # vault: Disabled due to port conflicts - can be enabled manually if needed

  # --- Observability Infrastructure ---
  prometheus:
    image: prom/prometheus:latest
    container_name: somaagenthub_prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - "${PROMETHEUS_PORT:-10010}:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:9090/-/healthy || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6
    networks:
      - somaagenthub-network

  grafana:
    image: grafana/grafana:latest
    container_name: somaagenthub_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
    ports:
      - "${GRAFANA_PORT:-10011}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infra/observability/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6
    networks:
      - somaagenthub-network

volumes:
  temporal-postgres-data:
    driver: local
    name: somaagenthub_temporal_postgres_data
  redis-data:
    driver: local
    name: somaagenthub_redis_data
  app-postgres-data:
    driver: local
    name: somaagenthub_app_postgres_data
  qdrant-data:
    driver: local
    name: somaagenthub_qdrant_data
  clickhouse-data:
    driver: local
    name: somaagenthub_clickhouse_data
  minio-data:
    driver: local
    name: somaagenthub_minio_data
  vault-data:
    driver: local
    name: somaagenthub_vault_data
  prometheus-data:
    driver: local
    name: somaagenthub_prometheus_data
  grafana-data:
    driver: local
    name: somaagenthub_grafana_data

networks:
  somaagenthub-network:
    name: somaagenthub-network