#!/usr/bin/env python3
"""
SomaAgent CLI - Command-line interface for SomaAgent.

Usage:
    soma login
    soma chat "Hello, how can you help me?"
    soma capsule list
    soma capsule install <capsule-id>
    soma agent create "My Agent" --model gpt-4
    soma workflow start kamachiq --input project.json
"""

import os
import sys
import json
import click
from rich.console import Console
from rich.table import Table
from rich.markdown import Markdown
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from pathlib import Path

# Add SDK to path
sys.path.insert(0, str(Path(__file__).parent.parent / "sdk" / "python"))
from somaagent import SomaAgentClient
from somaagent.exceptions import SomaAgentError

console = Console()


def get_config_dir() -> Path:
    """Get config directory."""
    config_dir = Path.home() / ".somaagent"
    config_dir.mkdir(exist_ok=True)
    return config_dir


def save_api_key(api_key: str):
    """Save API key to config."""
    config_file = get_config_dir() / "credentials"
    config_file.write_text(api_key)
    config_file.chmod(0o600)


def load_api_key() -> str:
    """Load API key from config or env."""
    # Try environment variable first
    api_key = os.getenv("SOMAAGENT_API_KEY")
    if api_key:
        return api_key
    
    # Try config file
    config_file = get_config_dir() / "credentials"
    if config_file.exists():
        return config_file.read_text().strip()
    
    return None


def get_client() -> SomaAgentClient:
    """Get authenticated client."""
    api_key = load_api_key()
    if not api_key:
        console.print("[red]Not authenticated. Run 'soma login' first.[/red]")
        sys.exit(1)
    
    return SomaAgentClient(api_key=api_key)


@click.group()
@click.version_option(version="0.1.0")
def cli():
    """SomaAgent CLI - AI agents with task capsules."""
    pass


@cli.command()
@click.option("--api-key", prompt=True, hide_input=True, help="SomaAgent API key")
def login(api_key: str):
    """Authenticate with SomaAgent."""
    try:
        # Test the API key
        client = SomaAgentClient(api_key=api_key)
        client.list_capsules(limit=1)
        
        # Save if successful
        save_api_key(api_key)
        console.print("[green]✓ Successfully authenticated![/green]")
        
    except SomaAgentError as e:
        console.print(f"[red]Authentication failed: {e}[/red]")
        sys.exit(1)


@cli.command()
@click.argument("message")
@click.option("--stream", is_flag=True, help="Stream response")
def chat(message: str, stream: bool):
    """Send a chat message."""
    client = get_client()
    
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("Thinking...", total=None)
            
            # Create conversation
            conversation = client.create_conversation()
            
            if stream:
                # Stream response
                console.print(Panel(f"[bold]You:[/bold] {message}"))
                console.print("[bold]Assistant:[/bold]", end=" ")
                
                for chunk in client.stream_completion(conversation.id, message):
                    console.print(chunk, end="")
                
                console.print()  # New line
            else:
                # Regular response
                response = client.send_message(conversation.id, message)
                
                progress.stop()
                console.print(Panel(f"[bold]You:[/bold] {message}"))
                console.print(Panel(Markdown(response.content), title="Assistant"))
        
    except SomaAgentError as e:
        console.print(f"[red]Error: {e}[/red]")
        sys.exit(1)


@cli.group()
def capsule():
    """Manage task capsules."""
    pass


@capsule.command("list")
@click.option("--category", help="Filter by category")
@click.option("--limit", default=20, help="Number of results")
def list_capsules(category: str, limit: int):
    """List available capsules."""
    client = get_client()
    
    try:
        capsules = client.list_capsules(category=category, limit=limit)
        
        table = Table(title="Available Capsules")
        table.add_column("ID", style="cyan")
        table.add_column("Name", style="green")
        table.add_column("Category", style="yellow")
        table.add_column("Version", style="blue")
        table.add_column("Price", style="magenta")
        table.add_column("Rating", style="white")
        
        for c in capsules:
            table.add_row(
                c.id,
                c.name,
                c.category,
                c.version,
                f"${c.price:.2f}" if c.price > 0 else "Free",
                f"⭐ {c.rating:.1f}"
            )
        
        console.print(table)
        
    except SomaAgentError as e:
        console.print(f"[red]Error: {e}[/red]")
        sys.exit(1)


@capsule.command("install")
@click.argument("capsule_id")
def install_capsule(capsule_id: str):
    """Install a capsule."""
    client = get_client()
    
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task(f"Installing {capsule_id}...", total=None)
            result = client.install_capsule(capsule_id)
        
        console.print(f"[green]✓ Successfully installed {capsule_id}[/green]")
        
    except SomaAgentError as e:
        console.print(f"[red]Error: {e}[/red]")
        sys.exit(1)


@capsule.command("execute")
@click.argument("capsule_id")
@click.option("--input", "input_file", type=click.File("r"), help="Input JSON file")
def execute_capsule(capsule_id: str, input_file):
    """Execute a capsule."""
    client = get_client()
    
    try:
        # Load inputs
        inputs = {}
        if input_file:
            inputs = json.load(input_file)
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task(f"Executing {capsule_id}...", total=None)
            result = client.execute_capsule(capsule_id, inputs)
        
        console.print(Panel(
            json.dumps(result, indent=2),
            title=f"Execution Result: {capsule_id}"
        ))
        
    except SomaAgentError as e:
        console.print(f"[red]Error: {e}[/red]")
        sys.exit(1)


@cli.group()
def agent():
    """Manage AI agents."""
    pass


@agent.command("create")
@click.argument("name")
@click.option("--instructions", prompt=True, help="System instructions")
@click.option("--model", default="gpt-4", help="Model to use")
@click.option("--tools", multiple=True, help="Tool/capsule IDs")
def create_agent(name: str, instructions: str, model: str, tools: tuple):
    """Create a new agent."""
    client = get_client()
    
    try:
        agent = client.create_agent(
            name=name,
            instructions=instructions,
            model=model,
            tools=list(tools)
        )
        
        console.print(f"[green]✓ Created agent: {agent.id}[/green]")
        console.print(Panel(
            f"Name: {agent.name}\n"
            f"Model: {agent.model}\n"
            f"Tools: {len(agent.tools)}",
            title="Agent Details"
        ))
        
    except SomaAgentError as e:
        console.print(f"[red]Error: {e}[/red]")
        sys.exit(1)


@agent.command("run")
@click.argument("agent_id")
@click.argument("prompt")
@click.option("--stream", is_flag=True, help="Stream response")
def run_agent(agent_id: str, prompt: str, stream: bool):
    """Run an agent."""
    client = get_client()
    
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("Running agent...", total=None)
            result = client.run_agent(agent_id, prompt, stream=stream)
        
        console.print(Panel(
            Markdown(result.get("output", "")),
            title=f"Agent {agent_id}"
        ))
        
    except SomaAgentError as e:
        console.print(f"[red]Error: {e}[/red]")
        sys.exit(1)


@cli.group()
def workflow():
    """Manage workflows."""
    pass


@workflow.command("start")
@click.argument("workflow_type")
@click.option("--input", "input_file", type=click.File("r"), required=True, help="Input JSON file")
def start_workflow(workflow_type: str, input_file):
    """Start a workflow."""
    client = get_client()
    
    try:
        inputs = json.load(input_file)
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task(f"Starting {workflow_type} workflow...", total=None)
            run = client.start_workflow(workflow_type, inputs)
        
        console.print(f"[green]✓ Workflow started: {run.id}[/green]")
        console.print(f"Status: {run.status}")
        
    except SomaAgentError as e:
        console.print(f"[red]Error: {e}[/red]")
        sys.exit(1)


@workflow.command("status")
@click.argument("run_id")
def workflow_status(run_id: str):
    """Get workflow status."""
    client = get_client()
    
    try:
        run = client.get_workflow_status(run_id)
        
        console.print(Panel(
            f"Status: {run.status}\n"
            f"Started: {run.started_at}\n"
            f"Completed: {run.completed_at or 'In progress'}",
            title=f"Workflow {run.id}"
        ))
        
        if run.outputs:
            console.print(Panel(
                json.dumps(run.outputs, indent=2),
                title="Outputs"
            ))
        
    except SomaAgentError as e:
        console.print(f"[red]Error: {e}[/red]")
        sys.exit(1)


if __name__ == "__main__":
    cli()
